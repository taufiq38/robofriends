{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Scroll.js","components/Searchbox.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","Scroll","props","style","overflow","border","height","children","Searchbox","searchfield","searchChange","type","placeholder","onChange","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initailStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.724f8d9f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card=({name,email,id})=>{\n    \n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=100x100`} />\n            <div>\n                <h2>{name} </h2>\n                <p>{email} </p>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst Cardlist=({robots})=>{\n  \n  \n  return (\n        <div>\n        {\n          robots.map((user,i)=>{\n            return (\n                        <Card key={i}\n                         id={robots[i].id } \n                         name={robots[i].name} \n                         email={robots[i].email} />\n                    )   \n            })\n        }\n      </div>\n    )\n}\n\nexport default Cardlist;","import React from 'react'\n\nconst Scroll = (props)=>{\n    return(\n    <div style={{overflow: 'scroll', border: '5px solid black',height: '800px'}}>\n        {props.children};\n    </div>\n    );\n\n}\nexport default Scroll;","import React from 'react';\n\nconst Searchbox=({searchfield,searchChange})=>{\n    return(\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg--lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n        \n    )\n}\nexport default Searchbox;  ","import React,{ Component } from 'react';\nimport {connect} from 'react-redux';\nimport Cardlist from '../components/Cardlist';\nimport Scroll from '../components/Scroll';\nimport Searchbox from '../components/Searchbox';\nimport './App.css';\nimport {setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps= state=>{\n    return{\n        searchField:state.searchRobots.searchField,\n        robots:state.requestRobots.robots,\n        isPending:state.requestRobots.isPending,\n        error:state.requestRobots.error,\n    }\n}\n\nconst mapDispatchToProps=(dispatch)=>{\n    return{\n    onSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\n    onRequestRobots:()=>dispatch(requestRobots())\n    }\n}\n\n\nclass App extends Component {\n    \n    componentDidMount(){\n        \n        this.props.onRequestRobots()\n        \n    }\n    \n    render() {\n        \n        const {searchField,onSearchChange,robots,isPending}=this.props;\n        const filteredRobots=robots.filter(robot=>{\n            \n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        return isPending ?\n            <h1>loading</h1>:\n        \n            (\n                <div className='tc'>\n                    <h1 className='f1'>Robofriends</h1>\n                    <Searchbox searchChange={onSearchChange}/>\n                    <Scroll>\n                        \n                            <Cardlist robots={filteredRobots} />\n                        \n                    </Scroll>\n                    \n                </div>\n                \n            )\n        \n     }  \n        \n    \n    \n}        \n\nexport default connect(mapStateToProps,mapDispatchToProps) (App);","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField=(text) => ({\n    type:CHANGE_SEARCH_FIELD,\n    payload:text\n})\n\nexport const requestRobots=()=>(dispatch)=>{\n    dispatch({type:REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\n    .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\n}  \n","export const CHANGE_SEARCH_FIELD= 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch={\n    searchField:'',\n} \nexport const searchRobots=(state=initialStateSearch,action={})=>{\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({},state,{searchField:action.payload});\n        default:\n            return state;\n    }\n}\nconst initailStateRobots={\n    isPending:false,\n    robots:[],\n    error:'',\n\n}\n\nexport const requestRobots=(state=initailStateRobots,action={}) =>{\n    switch(action.type){\n        case  REQUEST_ROBOTS_PENDING:\n            return Object.assign({},state,{isPending:true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({},state,{robots:action.payload,isPending:false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({},state,{error:action.payload,isPending:false});\n        default:\n            return state;\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React  from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport {searchRobots,requestRobots} from './reducers'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst logger=createLogger();\nconst rootReducer=combineReducers({searchRobots,requestRobots});\nconst store=createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\nReactDOM.render(\n\n  <div>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </div>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}