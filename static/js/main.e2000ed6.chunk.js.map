{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Scroll.js","components/Searchbox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","Scroll","props","style","overflow","border","height","children","Searchbox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchEvent","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAgBeA,EAdJ,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAKC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GAEpB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAKF,EAAL,KACA,2BAAIC,EAAJ,QCYDK,EAlBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEf,OACM,6BAEEA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACY,kBAAC,EAAD,CAAMC,IAAKD,EACVR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCH3BW,EARA,SAACC,GACZ,OACA,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAkBC,OAAQ,UAC9DJ,EAAMK,SADX,MCWWC,EAbC,SAAC,GAA6B,EAA5BC,YAA6B,IAAjBC,EAAgB,EAAhBA,aAC1B,OACI,yBAAKlB,UAAU,OACX,2BACIA,UAAU,oCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCWXI,G,wDAjBX,WAAYZ,GAAO,IAAD,8BACd,cAAMA,IACDa,MAAM,CACPC,UAAS,GAHC,E,8DAMAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGxB,OAAGG,KAAKJ,MAAMC,SACH,4DAEJG,KAAKjB,MAAMK,a,GAdEc,cCoDbC,E,kDA7CX,aAAc,IAAD,8BACT,gBAYJC,cAAgB,SAACC,GACb,EAAKJ,SAAS,CAACX,YAAYe,EAAMC,OAAOC,SAZxC,EAAKX,MAAM,CACPnB,OAAO,GACPa,YAAY,IAJP,E,gEAOO,IAAD,OACfkB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKX,SAAS,CAACxB,OAAOmC,S,+BAMjC,IAAD,EACsBZ,KAAKJ,MAAzBN,EADF,EACEA,YAAYb,EADd,EACcA,OACboC,EAAepC,EAAOqC,QAAO,SAAAC,GAE/B,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS3B,EAAY0B,kBAEzD,OAAQvC,EAAOyC,OAIP,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWkB,aAAcS,KAAKI,gBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQoC,OARlC,2C,GAxBMX,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAEP,6BACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.e2000ed6.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card=({name,email,id})=>{\n    \n    return(\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=100x100`} />\n            <div>\n                <h2>{name} </h2>\n                <p>{email} </p>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst Cardlist=({robots})=>{\n  \n  return (\n        <div>\n        {\n          robots.map((user,i)=>{\n            return (\n                        <Card key={i}\n                         id={robots[i].id } \n                         name={robots[i].name} \n                         email={robots[i].email} />\n                    )   \n            })\n        }\n      </div>\n    )\n}\n\nexport default Cardlist;","import React from 'react'\n\nconst Scroll = (props)=>{\n    return(\n    <div style={{overflow: 'scroll', border: '5px solid black',height: '800px'}}>\n        {props.children};\n    </div>\n    );\n\n}\nexport default Scroll;","import React from 'react';\n\nconst Searchbox=({searchfield,searchChange})=>{\n    return(\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg--lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n        \n    )\n}\nexport default Searchbox;  ","import React,{Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            hasError:false,\n        }\n    }\n    componentDidCatch(error, info){\n        this.setState({hasError:true})\n    }\n    render(){\n        if(this.state.hasError){\n            return <h1>oops.this is not good to see</h1>\n        }\n        return this.props.children;\n    }\n    \n}\nexport default ErrorBoundary;","import React,{ Component } from 'react';\nimport Cardlist from '../components/Cardlist';\nimport Scroll from '../components/Scroll';\nimport Searchbox from '../components/Searchbox';\nimport './App.css';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state={\n            robots:[],\n            searchfield:'',      \n        }\n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response=>response.json())\n            .then(users=>this.setState({robots:users}));\n        \n    }\n    onSearchEvent = (event) => {\n        this.setState({searchfield:event.target.value})\n    }\n    render() {\n        const {searchfield,robots}=this.state\n        const filteredRobots=robots.filter(robot=>{\n            \n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        });\n        return !robots.length ?\n            <h1>loading</h1>:\n        \n            (\n                <div className='tc'>\n                    <h1 className='f1'>Robofriends</h1>\n                    <Searchbox searchChange={this.onSearchEvent}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <Cardlist robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                    \n                </div>\n                \n            )\n        \n     }  \n        \n    \n    \n}        \n\nexport default App;;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React  from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n\n  <div>\n    <App/>\n  </div>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}